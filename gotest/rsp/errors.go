package rsp

var SuccessMessages = map[int]string{
	// 用户相关成功消息
	10001: "用户创建成功",     // 用户成功创建
	10002: "用户信息获取成功", // 成功获取用户信息
	10003: "用户登录成功",     // 用户成功登录

	// 团队相关成功消息
	11001: "团队创建成功",     // 成功创建团队
	11002: "团队信息获取成功", // 成功获取团队信息
	11003: "团队更新成功",     // 成功更新团队信息

	// 团队成员相关成功消息
	12001: "成员成功添加到团队",   // 成功将成员添加到团队
	12002: "成员从团队中移除成功", // 成功从团队中移除成员
	12003: "团队成员信息更新成功", // 成功更新团队成员信息

	// 系统业务逻辑成功消息
	13001: "请求的数据处理成功", // 数据处理成功
	13002: "业务规则验证成功",   // 数据符合业务规则

	// 数据库相关成功消息
	20001: "数据库连接成功", // 成功连接到数据库
	20002: "数据库查询成功", // 数据库查询操作成功
	20003: "数据库插入成功", // 数据成功插入
	20004: "数据库迁移成功", // 数据库迁移成功

	// 请求参数成功消息
	30001: "请求参数验证成功", // 参数验证成功
	30002: "请求参数处理成功", // 参数处理成功

	// 系统级成功消息
	40001: "操作成功",     // 系统操作成功
	40002: "服务正常运行", // 系统服务正常运行

	// JWT 相关成功消息
	50001: "JWT 生成成功", // 成功生成 JWT
	50002: "密码加密成功", // 密码成功加密

	// 系统数据库相关成功消息
	60001: "系统数据库操作成功", // 数据库操作成功
}

// ErrorMessages 错误码和错误信息的映射表
var ErrorMessages = map[int]string{
	// 用户相关错误
	10001: "用户已存在",       // 用户已经存在
	10002: "用户不存在",       // 用户不存在
	10003: "用户名或密码错误", // 用户名或密码不匹配

	// 团队相关错误
	11001: "团队名称已存在",   // 同一用户下不能重复创建团队名称
	11002: "团队不存在",       // 查询或操作的团队在数据库中不存在
	11003: "无权限操作该团队", // 当前用户没有权限操作该团队

	// 团队成员相关错误
	12001: "成员已在团队中",     // 添加成员到团队时，发现成员已经存在
	12002: "成员不在团队中",     // 操作团队成员时，发现成员不属于团队
	12003: "团队角色无效",       // 提供的团队角色不是有效值（如admin, member等）
	12004: "无法移除团队拥有者", // 团队拥有者不能被移除

	// 系统业务逻辑错误
	13001: "请求的数据不完整",   // 请求参数缺少必要字段
	13002: "数据不符合业务规则", // 数据状态与业务逻辑要求不匹配

	// 数据库相关错误
	20001: "数据库连接失败", // 数据库连接失败
	20002: "数据库查询失败", // 数据库查询失败
	20003: "数据库插入失败", // 数据库插入失败
	20004: "数据库迁移失败", // 数据库迁移失败

	// 请求参数错误
	30001: "缺少请求参数", // 缺少必要的请求参数
	30002: "请求参数无效", // 请求参数格式无效

	// 系统级错误
	40001: "内部服务器错误", // 服务器内部错误
	40002: "服务不可用",     // 服务不可用

	// JWT 相关错误
	50001: "JWT 生成失败", // JWT 生成失败
	50002: "密码加密失败", // 密码加密失败

	// 系统数据库问题
	60001: "数据库问题", // 服务器数据库问题
}

type ErrorResponse struct {
	Code    int         `json:"code"`           // 错误码
	Message string      `json:"message"`        // 错误描述
	Data    interface{} `json:"data,omitempty"` // 附加数据，通常为额外的错误信息
}

// NewErrorResponse 用于创建一个新的 ErrorResponse
func NewErrorResponse(code int, data interface{}) *ErrorResponse {
	// 查找错误信息
	message, exists := ErrorMessages[code]
	if !exists {
		message = "未知错误" // 如果没有找到对应的错误信息，使用默认信息
	}

	return &ErrorResponse{
		Code:    code,
		Message: message,
		Data:    data,
	}
}

// NewSuccessResponse 成功返回
func NewSuccessResponse(code int, data interface{}) *ErrorResponse {
	// 查找错误信息
	message, exists := SuccessMessages[code]
	if !exists {
		message = "未定义的成功" // 如果没有找到对应的错误信息，使用默认信息
	}
	return &ErrorResponse{
		Code:    code,
		Message: message,
		Data:    data,
	}
}
